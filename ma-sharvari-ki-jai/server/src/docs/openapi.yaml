openapi: 3.0.3
info:
  title: Ma Sharvari Ki Jai CRM API
  version: 0.2.0
servers:
  - url: http://localhost:5000
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Customer:
      type: object
      required: [name, email]
      properties:
        name: { type: string }
        email: { type: string, format: email }
        phone: { type: string }
        totalSpend: { type: number }
        visitCount: { type: integer }
        lastOrderDate: { type: string, format: date-time }
        tags: { type: array, items: { type: string } }
        attributes: { type: object }
        externalCustomerId: { type: string, description: 'Idempotency key from source system' }
        createdBy: { type: string, description: 'User owner (server-managed)' }
    Order:
      type: object
      required: [customerId, orderTotal]
      properties:
        customerId: { type: string, description: 'Mongo ObjectId of Customer' }
        orderTotal: { type: number }
        orderDate: { type: string, format: date-time }
        status: { type: string, enum: [PLACED, PAID, SHIPPED, DELIVERED, CANCELLED] }
        externalOrderId: { type: string, description: 'Idempotency key from source system' }
        createdBy: { type: string, description: 'User owner (server-managed)' }
        items:
          type: array
          items:
            type: object
            required: [productId, name, price, quantity]
            properties:
              productId: { type: string }
              name: { type: string }
              price: { type: number }
              quantity: { type: integer, minimum: 1 }
    Segment:
      type: object
      properties:
        _id: { type: string }
        name: { type: string }
        description: { type: string }
        rules: { type: object }
        audienceSize: { type: integer }
        createdAt: { type: string, format: date-time }
    Campaign:
      type: object
      properties:
        _id: { type: string }
        name: { type: string }
        segmentId: { type: string }
        channel: { type: string, enum: [EMAIL, SMS] }
        template: { type: string }
        status: { type: string, enum: [draft, scheduled, running, completed, paused] }
        counts:
          type: object
          properties:
            total: { type: integer }
            sent: { type: integer }
            failed: { type: integer }
            delivered: { type: integer }
        createdAt: { type: string, format: date-time }
    CommunicationLog:
      type: object
      properties:
        campaignId: { type: string }
        customerId: { type: string }
        channel: { type: string, enum: [EMAIL, SMS] }
        status: { type: string, enum: [PENDING, SENT, FAILED, DELIVERED, OPENED, CLICKED] }
        createdAt: { type: string, format: date-time }
paths:
  /api/health:
    get:
      summary: Health check
      responses:
        '200': { description: OK }
  /api/auth/google:
    post:
      summary: Exchange Google ID token for JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [idToken]
              properties:
                idToken: { type: string }
      responses:
        '200': { description: OK }
  /api/auth/me:
    get:
      summary: Get current user
      security: [ { bearerAuth: [] } ]
      responses:
        '200': { description: OK }
  /api/customers:
    post:
      summary: Ingest customers
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/Customer'
                - type: array
                  items: { $ref: '#/components/schemas/Customer' }
      description: |
        Idempotent ingest by `externalCustomerId` per user. Re-sending the same payload updates the record.
      responses:
        '201': { description: Created }
    get:
      summary: List customers
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: query
          name: q
          schema: { type: string }
          description: Search in name/email
        - in: query
          name: email
          schema: { type: string }
        - in: query
          name: tags
          schema: { type: string }
          description: Comma-separated list; matches customers containing all tags
        - in: query
          name: minSpend
          schema: { type: number }
        - in: query
          name: maxSpend
          schema: { type: number }
        - in: query
          name: dateFrom
          schema: { type: string, format: date-time }
        - in: query
          name: dateTo
          schema: { type: string, format: date-time }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100 }
      responses:
        '200': { description: OK }
  /api/orders:
    post:
      summary: Ingest orders
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/Order'
                - type: array
                  items: { $ref: '#/components/schemas/Order' }
      description: |
        Idempotent ingest by `externalOrderId` per user. Re-sending the same payload updates the record.
      responses:
        '201': { description: Created }
    get:
      summary: List orders
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: query
          name: customerId
          schema: { type: string }
        - in: query
          name: status
          schema: { type: string, enum: [PLACED, PAID, SHIPPED, DELIVERED, CANCELLED] }
        - in: query
          name: minTotal
          schema: { type: number }
        - in: query
          name: dateFrom
          schema: { type: string, format: date-time }
        - in: query
          name: dateTo
          schema: { type: string, format: date-time }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100 }
      responses:
        '200': { description: OK }
  /api/segments:
    get:
      summary: List segments (owned)
      security: [ { bearerAuth: [] } ]
      responses:
        '200': { description: OK }
    post:
      summary: Create segment
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, rules]
              properties:
                name: { type: string }
                description: { type: string }
                rules: { type: object }
      responses:
        '201': { description: Created }
  /api/segments/preview:
    post:
      summary: Preview audience size
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [rules]
              properties:
                rules: { type: object }
                sample: { type: integer }
      responses:
        '200': { description: OK }
  /api/segments/{id}:
    get:
      summary: Get segment
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
    put:
      summary: Update segment
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                description: { type: string }
                rules: { type: object }
      responses:
        '200': { description: OK }
    delete:
      summary: Delete segment
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
  /api/campaigns:
    get:
      summary: List campaigns (owned)
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: query
          name: skip
          schema: { type: integer, minimum: 0 }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100 }
      responses:
        '200': { description: OK }
    post:
      summary: Create campaign
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, segmentId, channel, template]
              properties:
                name: { type: string }
                segmentId: { type: string }
                channel: { type: string, enum: [EMAIL, SMS] }
                template: { type: string }
      responses:
        '201': { description: Created }
  /api/campaigns/{id}/logs:
    get:
      summary: Get campaign logs
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
        - in: query
          name: status
          schema: { type: string, enum: [PENDING, SENT, DELIVERED, FAILED] }
        - in: query
          name: channel
          schema: { type: string, enum: [EMAIL, SMS] }
        - in: query
          name: from
          schema: { type: string, format: date-time }
        - in: query
          name: to
          schema: { type: string, format: date-time }
        - in: query
          name: skip
          schema: { type: integer, minimum: 0 }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100 }
      responses:
        '200': { description: OK }
  /api/campaigns/vendor/send:
    post:
      summary: Simulate vendor send
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [campaignId]
              properties:
                campaignId: { type: string }
      responses:
        '200': { description: OK }
  /api/campaigns/vendor/receipt:
    post:
      summary: Vendor delivery receipt webhook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [vendorMessageId, status]
              properties:
                vendorMessageId: { type: string }
                status: { type: string, enum: [DELIVERED, FAILED] }
      responses:
        '200': { description: OK }
  /api/ai/suggest-message:
    post:
      summary: Suggest short message variants for a goal
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [goal]
              properties:
                goal: { type: string }
                brand: { type: string }
                tone: { type: string, enum: [friendly, formal, excited] }
                channel: { type: string, enum: [EMAIL, SMS] }
                segmentSummary: { type: string }
                variables: { type: array, items: { type: string } }
      responses:
        '200': { description: OK }